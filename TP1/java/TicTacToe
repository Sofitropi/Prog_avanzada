import java.util.Scanner;

public class Main {
    
    public static void main(String[] args) throws Exception {
      // Initialize variables and arrays 
      Scanner userInput = new Scanner(System.in); 
      String[][] gameBoard = { {" ", " ", " ",  }, {" ", " ", " ",  }, {" ", " ", " ",  } };
      int a = 0;
      int b = 1;
      int c = 2; 
      int I = 0;
      int II = 1;
      int III = 2;
      String playerXMove = " ";
      String splayerYMove = " "; 
      // Instructions 
      System.out.println("TicTacToe Game");
       // Tablero de juego 
      System.out.println("  a     b     c \n      |     |     \n"+"1  "+ gameBoard[I][a] + "  |  "+ gameBoard[I][b] +
      "  |  "+ gameBoard[I][c] +"  \n _____|_____|_____\n      |     |     \n2  "
      + gameBoard[II][a] + "  |  "+ gameBoard[II][b] +"  |  "+ gameBoard[II][c] +
      "  \n _____|_____|_____\n      |     |     \n3  "+ gameBoard[III][a] +
      "  |  "+ gameBoard[III][b] +"  |  "+ gameBoard[III][c]+"  \n      |     |");
      // Main Loop 
      while ( spaceInBoard(gameBoard) == true && !(gameEvaluation(gameBoard) == 1 || gameEvaluation(gameBoard) == -1) )
      {
       
        // Players Turn 
        playerXMove = getUserInputCol(userInput); //ingresa la columna que quiere 
        splayerYMove = getUserInputRow(userInput); // ingresa la fila que quiere
        while (!gameBoard[uIntputIntoString(splayerYMove)][uIntputIntoString(playerXMove)].equals(" "))// verifica la disponibilidad del espacio ingresado
        {
        System.out.println("Ya esta ocupada, vuelve a ingresarlo ");
        playerXMove = getUserInputCol(userInput); // Vuelve a pedir los datos
        splayerYMove = getUserInputRow(userInput); 
        }
        gameBoard[uIntputIntoString(splayerYMove)][uIntputIntoString(playerXMove)] = "o"; 
        System.out.println("  a     b     c \n      |     |     \n"+"1  "+ gameBoard[I][a] + "  |  "+ gameBoard[I][b] +"  |  "+ gameBoard[I][c] +"  \n _____|_____|_____\n      |     |     \n2  "+ gameBoard[II][a] + "  |  "+ gameBoard[II][b] +"  |  "+ gameBoard[II][c] +"  \n _____|_____|_____\n      |     |     \n3  "+ gameBoard[III][a] +"  |  "+ gameBoard[III][b] +"  |  "+ gameBoard[III][c]+"  \n      |     |");
        // CPU Turn 
        if ( spaceInBoard(gameBoard) == true && !(gameEvaluation(gameBoard) == 1 || gameEvaluation(gameBoard) == -1) )
        {
        gameBoard[bestMoveRow(gameBoard)][bestMoveCol(gameBoard)] = "x"; // EValua el juego e imprime en la posicion 
        System.out.println("  a     b     c \n      |     |     \n"+"1  "+ gameBoard[I][a] + "  |  "+ gameBoard[I][b] +"  |  "+ gameBoard[I][c] +"  \n _____|_____|_____\n      |     |     \n2  "+ gameBoard[II][a] + "  |  "+ gameBoard[II][b] +"  |  "+ gameBoard[II][c] +"  \n _____|_____|_____\n      |     |     \n3  "+ gameBoard[III][a] +"  |  "+ gameBoard[III][b] +"  |  "+ gameBoard[III][c]+"  \n      |     |");
        }
      }
      //Ending message 
      if (gameEvaluation(gameBoard) == -1)
      {
        System.out.println("GANASTEEE:)");
      }
      else if (gameEvaluation(gameBoard) == 1)
      {
        System.out.println("PERDISTEEE :(");
      }
      else 
      {
        System.out.println("EMPATE ._.");
      }
      
      
    }
    static int uIntputIntoString(String move) 
    {
      switch (move)
      {
        case "1": return 0; 
        case "2": return 1;
        case "3": return 2;
        case "a": return 0; 
        case "b": return 1; 
        case "c": return 2; 
        default: return 0; 
        
      } 
      
    }

    static int gameEvaluation(String[][] game) // Se recorre todo el juego con for para saber como va el tablero
    {
    for (int row = 0; row < 3; row++)
    {
      if (game[row][0].equals(game[row][1]) && game[row][0].equals(game[row][2]) )
      {
        if (game[row][0].equals("x"))
        {
          return +1;
        }
        else if (game[row][0].equals("o"))
        {
          return -1; 
        }
      }
    }
    for (int col = 0; col < 3; col++)
    {
      if (game[0][col].equals(game[1][col]) && game[0][col].equals(game[2][col]) )
      {
        if (game[0][col].equals("x"))
        {
          return +1;
        }
        else if (game[0][col].equals("o"))
        {
          return -1; 
        }
      }
    }
    if (game[0][0].equals(game[1][1]) && game[0][0].equals(game[2][2]) )
    {
      if (game[0][0].equals("x"))
      {
        return +1;
      }
      else if (game[0][0].equals("o"))
      {
        return -1; 
      }
    }
    if (game[0][2].equals(game[1][1]) && game[1][1].equals(game[2][0]) )
    {
      if (game[0][2].equals("x"))
      {
        return +1;
      }
      else if (game[0][2].equals("o"))
      {
        return -1; 
      }
    }
    return 0; 
    }
    
    static boolean spaceInBoard(String[][] game)// Se verifica que espacios aun no estan ocupados 
    {
      for (int x = 0; x < 3; x++)
      {
        for (int y = 0; y < 3; y++)
        {
          if (game[x][y].equals(" "))
          {
            return true;   //si noe stan ocupados
          }
        }
      }
      return false;  //si si estan ocupados
    }
  
    static int minimax(String[][] board, boolean maxPlayer) 
    {
      int score = gameEvaluation(board); 

      if (score == 1) //para saber si esta ocupado o no que es lo que hace gameEvaluation
      {
      return score;
      }
      
      if (score == -1)
      {
      return score;  
      }
      if (spaceInBoard(board) == false)
      {
        return 0; 
      }
      
      if (maxPlayer == true)
      {
        int maxEval = -100; 
        for (int x = 0; x < 3; x++)
        {
          for (int y = 0; y < 3; y++)
          {
            if (board[x][y].equals(" "))
            {          
              board[x][y] = "x"; 
              maxEval = Math.max(maxEval, minimax(board, false)); 
              board[x][y] = " ";      
            }           
          }
        }
        return maxEval;
      }
      else
      {
        int minEval = 100; 
        for (int x = 0; x < 3; x++)
        {
          for (int y = 0; y < 3; y++)
          {
            if (board[x][y].equals(" "))
            {
              board[x][y] = "o"; 
              minEval = Math.min(minEval, minimax(board, true)); 
              board[x][y] = " "; 
            }
          }
        }
        return minEval;
      }
     
    }
 
    static int bestMoveRow(String[][] board)
   {
     int bestValue = -100; 
     int bestRow = -1; 
     for (int x = 0; x < 3; x++)
     {
      for (int y = 0; y < 3; y++)
      {
        if (board[x][y].equals(" "))
        {
          board[x][y] = "x"; 
          int moveValue = Math.max(bestValue, minimax(board, false)); 
          board[x][y] = " ";
          if (moveValue > bestValue)
          {
            bestValue = moveValue; 
            bestRow = x;   
          }

        }
      }
     }
     return bestRow;  
   }
   
    static int bestMoveCol(String[][] board)
   {
     int bestValue = -100; 
     int bestCol = -1;  
     for (int x = 0; x < 3; x++)
     {
      for (int y = 0; y < 3; y++)
      {
        if (board[x][y].equals(" "))
        {
          board[x][y] = "x"; 
          int moveValue = Math.max(bestValue, minimax(board, false)); 
          board[x][y] = " ";
          if (moveValue > bestValue)
          {
            bestValue = moveValue; 
            bestCol = y;  
          }

        }
      }
     }
     return bestCol;  
   }
 
    static String getUserInputCol(Scanner userInput)
   {
    System.out.println("Columna?");
      String playerXMove = userInput.nextLine().toLowerCase();
      
      while (!playerXMove.equals("a") && !playerXMove.equals("b") && !playerXMove.equals("c"))
      {
      System.out.println("ingresa un valor valido");
      playerXMove = userInput.nextLine();
      }
     return playerXMove; 
   }
 
    static String getUserInputRow(Scanner userInput)
   {
    System.out.println("Fila?");
     String splayerYMove = userInput.nextLine();

    while (!splayerYMove.equals("1") && !splayerYMove.equals("2") && !splayerYMove.equals("3"))
    {
    System.out.println("ingresa un valor valido");
    splayerYMove = userInput.nextLine();
    }
    return splayerYMove; 
   }
  }
